configfile: "config.yml"
workdir: config["wd"]
test = ["PaLo500", "PaLo501", "PaLo502", "PaLo503", "PaLo504", "PaLo505", "PaLo545", "PaLo550", "PaLo564", "PaLo565"]

######################################
#      Running alignment tools       #
######################################
# 1 - on long read assemblies (Flye) #
# 2 - on hybrid assemblies (UniN)    #
######################################

rule all:
	input:
		##long read assemblies - Flye
		expand("flye/mini/mini_{sample}.sam",sample=test),
		expand("flye/ngmlr/ngmlr_{sample}.sam",sample=test),
		expand("flye/graphC/graphC_{sample}.sam",sample=test),
		expand("flye/graphNC/graphNC_{sample}.sam",sample=test),
		##hybrid assemblies - UniN
		expand("unicyclerN/mini/mini_{sample}.sam",sample=test),
		expand("unicyclerN/ngmlr/ngmlr_{sample}.sam",sample=test),
		expand("unicyclerN/graphC/graphC_{sample}.sam",sample=test),
		expand("unicyclerN/graphNC/graphNC_{sample}.sam",sample=test)

## 1 - long read assemblies

rule minimap2_flye:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genFlye = "/mnt/data/data_antibiolab/assembly/flye/{sample}/assembly.fasta"
	output:
		"flye/mini/mini_{sample}.sam"
	benchmark:
        	repeat("benchmarks/flye/mini/mini_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/minimapEnv.yml"
	shell:
		"minimap2 -ax map-ont -t {threads} {input.genFlye} {input.reads} > {output}"

rule ngmlr_flye:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genFlye = "/mnt/data/data_antibiolab/assembly/flye/{sample}/assembly.fasta"
	output:
		"flye/ngmlr/ngmlr_{sample}.sam"
	benchmark:
        	repeat("benchmarks/flye/ngmlr/ngmlr_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/ngmlrEnv.yml"
	shell:
		"ngmlr -t {threads} -r {input.genFlye} -q {input.reads} -o {output} -x ont"
		
rule graphC_flye:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genFlye = "/mnt/data/data_antibiolab/assembly/flye/{sample}/assembly.fasta"
	output:
		"flye/graphC/graphC_{sample}.sam"
	benchmark:
        	repeat("benchmarks/flye/graphC/graphC_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/graphmapEnv.yml"
	shell:
		"graphmap align -C -t {threads} -r {input.genFlye} -d {input.reads} -o {output}"
		
rule graphNC_flye:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genFlye = "/mnt/data/data_antibiolab/assembly/flye/{sample}/assembly.fasta"
	output:
		"flye/graphNC/graphNC_{sample}.sam"
	benchmark:
        	repeat("benchmarks/flye/graphNC/graphNC_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/graphmapEnv.yml"
	shell:
		"graphmap align -t {threads} -r {input.genFlye} -d {input.reads} -o {output}"	
		
## 2 - hybrid assemblies UniN

rule minimap2_uniN:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genUniN = "/mnt/data/data_antibiolab/assembly/unicyclerN/{sample}/assembly.fasta"
	output:
		"unicyclerN/mini/mini_{sample}.sam"
	benchmark:
        	repeat("benchmarks/unicyclerN/mini/mini_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/minimapEnv.yml"
	shell:
		"minimap2 -ax map-ont -t {threads} {input.genUniN} {input.reads} > {output}"

rule ngmlr_uniN:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genUniN = "/mnt/data/data_antibiolab/assembly/unicyclerN/{sample}/assembly.fasta"
	output:
		"unicyclerN/ngmlr/ngmlr_{sample}.sam"
	benchmark:
        	repeat("benchmarks/unicyclerN/ngmlr/ngmlr_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/ngmlrEnv.yml"
	shell:
		"ngmlr -t {threads} -r {input.genUniN} -q {input.reads} -o {output} -x ont"
		
rule graphC_uniN:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genUniN = "/mnt/data/data_antibiolab/assembly/unicyclerN/{sample}/assembly.fasta"
	output:
		"unicyclerN/graphC/graphC_{sample}.sam"
	benchmark:
        	repeat("benchmarks/unicyclerN/graphC/graphC_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/graphmapEnv.yml"
	shell:
		"graphmap align -C -t {threads} -r {input.genUniN} -d {input.reads} -o {output}"
		
rule graphNC_uniN:
	input:
		reads = "/mnt/data/data_antibiolab/nanopore/clean/{sample}.fastq.gz",
		genUniN = "/mnt/data/data_antibiolab/assembly/unicyclerN/{sample}/assembly.fasta"
	output:
		"unicyclerN/graphNC/graphNC_{sample}.sam"
	benchmark:
        	repeat("benchmarks/unicyclerN/graphNC/graphNC_{sample}_benchmark.txt",3)
	threads:
		config["threads"]
	conda:
		"envs/graphmapEnv.yml"
	shell:
		"graphmap align -t {threads} -r {input.genUniN} -d {input.reads} -o {output}"			

